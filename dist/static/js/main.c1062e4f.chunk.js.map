{"version":3,"sources":["components/Store.js","components/Serve.jsx","components/Customizer.jsx","components/Scene.jsx","App.jsx","index.js"],"names":["binDecals","lidDecals","generalDecals","armBandDecals","loadTexture","url","TextureLoader","load","texture","flipY","encoding","sRGBEncoding","invalidate","undefined","error","console","useStore","create","set","get","current","setCurrent","rendering","setRendering","render","showRenderGuides","setItem","item","items","wheels","name","showHubs","wheelRotation","wheelAngle_slider","value","range","step","serveSpeed_slider","scene","serveAngle_slider","rotateServe","showShadow","width_render_px_slider","height_render_px_slider","animationTime_slider","animationWobble_slider","rotateSpeed_slider","renderPNG_button","action","renderAnimation_button","renderWidth","renderHeight","color","aluminum","lid","open","selectedIndex","textures","bin","front_decal","rear_bottom_decal","rear_top_decal","side_arm_decal","engraveDepth_slider","props","group","useRef","useGLTF","nodes","materials","state","useState","hovered","setHovered","useEffect","cursor","document","body","style","btoa","useFrame","delta","rotation-y","ref","dispose","onPointerOver","e","stopPropagation","object","onPointerOut","intersections","length","onPointerMissed","onPointerDown","position","rotation-x","geometry","cap_fl","material","material-transparent","material-aoMapIntensity","material-roughnessMap","tex_cloud_ref","map","hub_fl","material-color","tire_fl","material-normalScale","cap_rl","hub_rl","tire_rl","boggy_arm_l","cap_fr","hub_fr","tire_fr","cap_rr","hub_rr","tire_rr","boggy_arm_r","lid_top","mat_lid_vinyl","material-roughness","material-map","material-opacity","onUpdate","self","needsUpdate","mat_lid_base","strip","lid_inside","lid_liner","mat_bin_vinyl","mat_bin_base","mat_front_decal","material-alphaTest","mat_rear_bottom_decal","mat_rear_top_decal","mat_side_arm_aluminum","material-flatShading","material-bumpScale","material-bumpMap","material-alphaMap","screen","mat_screen","tail_lights","mat_tail_lights","eye_lense","black_glass","mat_lense","black_plastic","black_plastic_base","blocker","mat_light_blocker","eye_plate","mat_metal_black_rough","liner","mat_floor","tex_floor_ref","floor","preload","PrettoSlider","withStyles","root","height","thumb","width","backgroundColor","border","marginTop","marginLeft","boxShadow","active","valueLabel","left","track","borderRadius","rail","Slider","PurpleSwitch","switchBase","checked","Switch","currentItem","imageInput","checkContrast","hex","parseInt","substring","renderGuide","show","String","className","onChange","type","log","target","h","str","replace","toString","index","backgroundImage","onClick","preventDefault","click","FormGroup","row","Object","entries","key","includes","FormControlLabel","control","Math","radToDeg","valueLabelDisplay","val","degToRad","min","max","onMouseEnter","onMouseLeave","label","canvas","getElementsByTagName","toDataURL","link","createElement","setAttribute","warn","id","accept","display","file","files","URL","createObjectURL","push","background","shadows","concurrent","gl","preserveDrawingBuffer","frameloop","dpr","fov","near","far","fallback","Serve","Environment","preset","OrbitControls","minDistance","maxDistance","enableDamping","dampingFactor","minPolarAngle","maxPolarAngle","skyColor","groundColor","intensity","shadow-camera-left","shadow-camera-bottom","shadow-camera-right","shadow-camera-top","shadow-mapSize-height","shadow-mapSize-width","castShadow","Scene","ReactDOM","App","getElementById"],"mappings":"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","file":"static/js/main.c1062e4f.chunk.js","sourcesContent":["import create from 'zustand';\nimport { sRGBEncoding, TextureLoader } from 'three'\nimport { invalidate } from '@react-three/fiber'\n\nconst binDecals = ['bin_1.png', 'bin_2.png', 'bin_3.png', 'bin_4.svg', 'bin_5.png']\nconst lidDecals = ['lid_1.png', 'lid_2.png', 'lid_3.png', 'lid_4.png', 'lid_5.png']\nconst generalDecals = ['serve_logo_word_stacked.png', 'decal_cat.png', 'decal_mask.png', 'decal_mustache.png', 'decal_postmates.png', 'decal_smile.png']\nconst armBandDecals = ['engrave_maze.png', 'engrave_word.png']\n\nconst loadTexture = (url) => {\n    if (!url) {\n        invalidate()\n        return null\n    }\n\n    return new TextureLoader().load(url, (texture) => {\n        texture.flipY = false\n        texture.encoding = sRGBEncoding\n        invalidate()\n        return texture\n    },\n    undefined,\n    (error) => {\n        console.error('An error happened: ', error)\n        invalidate()\n        return null\n    })\n}\n\nconst useStore = create((set, get) => ({\n    current: null,\n    setCurrent: (current) => {set({current: current})},\n    rendering: false,\n    setRendering: (render) => {set({rendering: render})},\n    binDecals: binDecals,\n    lidDecals: lidDecals,\n    generalDecals: generalDecals,\n    armBandDecals: armBandDecals,\n    showRenderGuides: false,\n    setItem: (item) => {set({})}, // just used to force re-render\n    loadTexture: (url) => {return loadTexture(url)},\n    items: {\n        wheels: {\n            name: 'Wheels',\n            showHubs: true,\n            wheelRotation: 0, \n            wheelAngle_slider: {\n                name: 'Wheel angle',\n                value: 0,\n                range: [-30, 30],\n                step: 0.01,\n            },\n            serveSpeed_slider: {\n                name: 'Speed (Meters per second)',\n                value: 0, \n                range: [-5, 5],\n                step: 0.01,\n            },\n        },\n        scene: {\n            name: 'Scene',\n            serveAngle_slider: {\n                name: 'Serve angle',\n                value: 0, \n                range: [0, 360],\n                step: 1,\n            },\n            rotateServe: false,\n            showShadow: true,\n            width_render_px_slider: {\n                name: 'Render width (px)',\n                value: 2048, \n                range: [128, 4096],\n                step: 128,\n            },\n            height_render_px_slider: {\n                name: 'Render height (px)',\n                value: 2048, \n                range: [128, 4096],\n                step: 128,\n            },\n            animationTime_slider: {\n                name: 'Render animation time (secs @24fps)',\n                value: 4, \n                range: [1, 10],\n                step: 1,\n            },\n            animationWobble_slider: {\n                name: 'Render animation wobble up/down',\n                value: 1, \n                range: [1, 5],\n                step: 1,\n            },\n            rotateSpeed_slider: {\n                name: 'Rotate speed',\n                value: 0.01, \n                range: [0.01, 0.5],\n                step: 0.01,\n            },\n            renderPNG_button: {\n                name: 'Render PNG 📷',\n                action: 'render frame'\n            },\n            renderAnimation_button: {\n                name: 'Render turntable (apng) 🎥',\n                action: 'render video'\n            },\n            renderWidth: '100%',\n            renderHeight: '100%',\n            color: '#000000',\n        },\n        aluminum: {\n            name: 'Aluminum',\n            color: '#ded8dd',\n        },\n        lid: {\n            name: 'Lid',\n            color: '#ffffff',\n            open: false,\n            selectedIndex: 3,\n            texture: loadTexture(lidDecals[3]),\n            textures: lidDecals\n        },\n        bin: {\n            name: 'Bin',\n            color: '#ffffff',\n            selectedIndex: 3,\n            texture: loadTexture(binDecals[3]),\n            textures: binDecals\n        },\n        front_decal: {\n            name: 'Front decal',\n            selectedIndex: null,\n            texture: null,\n            textures: generalDecals\n        },\n        rear_bottom_decal: {\n            name: 'Rear bottom decal',\n            selectedIndex: null,\n            texture: null,\n            textures: generalDecals\n        },\n        rear_top_decal: {\n            name: 'Rear top decal',\n            selectedIndex: null,\n            texture: null,\n            textures: generalDecals\n        },\n        side_arm_decal: {\n            name: 'Side arm',\n            // engraveDepth: -0.2,\n            engraveDepth_slider: {\n                name: 'Side arm depth',\n                value: -0.2, \n                range: [-1, 1],\n                step: 0.01,\n            },\n            selectedIndex: null,\n            texture: null,\n            textures: armBandDecals\n        },\n    },\n}));\n\nexport default useStore","import React, { useRef, useState, useEffect } from 'react'\nimport { useFrame } from '@react-three/fiber'\nimport { useGLTF } from '@react-three/drei'\nimport { Math } from 'three'\nimport useStore from './Store' \n\n\nexport default (props) => {\n  const group = useRef()\n  const { nodes, materials } = useGLTF('serve.glb')\n  const [setCurrent, items, setItem] = useStore(state => [state.setCurrent, state.items, state.setItem])\n  \n  const [hovered, setHovered] = useState(null)\n  useEffect(() => {\n    const cursor = `<svg width=\"64\" height=\"64\" viewBox=\"0 0 64 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <rect x=\"5\" y=\"30\" width=\"59\" height=\"19\" rx=\"2\" fill=\"black\"/>  \n      <text fill=\"white\" style=\"white-space:pre\" dominant-baseline=\"middle\" text-anchor=\"middle\" font-weight=\"bold\" font-family=\"Montserrat, sans-serif\" font-size=\"11\" letter-spacing=\"-.01em\"><tspan x=\"53%\" y=\"41\">${hovered && items[hovered].name}</tspan></text>\n      <path opacity=\"0.2\" d=\"M26.8258 21.451L16.4335 27.451C15.9139 27.751 15.3675 27.6046 15.0675 27.085C14.3175 25.786 13.2613 25.3565 11.6086 24.6941C10.739 24.3879 9.6828 23.9585 8.52658 23.3558C5.38114 21.7078 2.10889 19.4401 1.11248 18.5142C0.116071 17.5884 -0.0741217 16.659 0.0222885 16.026C0.0686986 15.3063 0.611518 14.6465 1.39094 14.1965C2.43017 13.5965 3.9694 13.8626 5.57203 14.4384L0.422031 5.51834C-0.427969 4.04609 0.0478632 2.27026 1.52011 1.42026C2.99235 0.570261 4.76818 1.04609 5.61818 2.51834L7.71818 6.15564C7.92799 5.91904 8.1378 5.68244 8.48421 5.48244C9.43684 4.93244 10.5163 5.00205 11.3493 5.44487C11.5457 4.98507 11.9287 4.64847 12.3617 4.39847C13.5741 3.69847 14.9768 3.92789 15.9732 4.85372C16.183 4.61712 16.4794 4.33052 16.8258 4.13052C18.2981 3.28052 20.0739 3.75635 20.9239 5.22859L22.4239 7.82667C23.7239 10.0783 24.3409 12.147 24.9079 14.129C25.4748 16.1111 25.9918 18.0065 27.1918 20.085C27.4918 20.6046 27.3454 21.151 26.8258 21.451Z\" fill=\"black\"/>\n      <path opacity=\"0.3\" d=\"M22 10.5C24.1467 14.5355 23.5 16 26 21.5L16 27.5L13.5 25C12.3333 24.5 7 22.5 7 22.5L1.40808 18.5058C0.597393 17.9267 0.328147 16.8437 0.773687 15.9526C1.19806 15.1039 2.13182 14.7381 2.97895 15.1658C4.1363 15.75 5.5 16.5 5.5 16.5C5.5 16.5 8.33333 18.3333 9 19L0.883403 5.47234C0.38886 4.6481 0.628869 3.58075 1.42865 3.04757C2.28412 2.47725 3.44266 2.73777 3.97164 3.6194L9 12L7.81796 9.3404C7.36799 8.32797 7.8328 7.14309 8.85114 6.70665C9.7878 6.30523 10.8763 6.67735 11.3712 7.56816L13 10.5L11.7584 7.70642C11.3519 6.79182 11.822 5.72599 12.7715 5.40949C13.4968 5.16772 14.2942 5.44131 14.7183 6.07744L17 9.5L16.2118 7.39812C15.843 6.41477 16.4637 5.33939 17.4996 5.16673C18.1142 5.0643 18.7342 5.31333 19.0899 5.8249C19.8644 6.93877 21.1034 8.81442 22 10.5Z\" fill=\"black\"/>\n      <path d=\"M22.5 9C24.6467 13.0355 24 14.5 26.5 20L16.5 26L14 23.5C12.8333 23 7.5 21 7.5 21L1.90808 17.0058C1.09739 16.4267 0.828147 15.3437 1.27369 14.4526C1.69806 13.6039 2.63182 13.2381 3.47895 13.6658C4.6363 14.25 6 15 6 15C6 15 8.83333 16.8333 9.5 17.5L1.3834 3.97234C0.88886 3.1481 1.12887 2.08075 1.92865 1.54757C2.78412 0.977251 3.94266 1.23777 4.47164 2.1194L9.5 10.5L8.31796 7.8404C7.86799 6.82797 8.3328 5.64309 9.35114 5.20665C10.2878 4.80523 11.3763 5.17735 11.8712 6.06816L13.5 9L12.2584 6.20642C11.8519 5.29182 12.322 4.22599 13.2715 3.90949C13.9968 3.66772 14.7942 3.94131 15.2183 4.57744L17.5 8L16.7118 5.89812C16.343 4.91477 16.9637 3.83939 17.9996 3.66673C18.6142 3.5643 19.2342 3.81333 19.5899 4.3249C20.3644 5.43877 21.6034 7.31442 22.5 9Z\" fill=\"white\" stroke=\"black\" stroke-linejoin=\"round\"/>\n    </svg>`\n    const auto = `<svg width=\"32\" height=\"32\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path opacity=\"0.3\" d=\"M3.5 25.5L0.5 2L19.5 16.5L10 18.5L3.5 25.5Z\" fill=\"black\"/>\n      <path d=\"M10.397 17.0107L10.2416 17.0434L10.1336 17.1598L4.36067 23.3768L1.64743 2.12306L18.8293 15.2355L10.397 17.0107Z\" fill=\"black\" stroke=\"white\"/>\n    </svg>`\n    document.body.style.cursor = `url('data:image/svg+xml;base64,${btoa(hovered ? cursor : auto)}'), auto`\n  }, [hovered])\n\n  useFrame((state, delta) => {\n    if (items.scene.rotateServe) {\n      items.scene.serveAngle_slider.value = (items.scene.serveAngle_slider.value + items.scene.rotateSpeed_slider.value) % 6.28319 // 360rad\n      setItem()\n      // invalidate()\n    }\n\n    // if (items.scene.wheelSpeed > 0) {\n    //   // wheel_fl.current.rotation.x += items.scene.wheelSpeed\n    //   wheelRotation = (wheelRotation + 0.01) % 6.28319 // 360rad\n    //   console.log(wheelRotation)\n    //   // wheel_rl.current.rotation.x += items.scene.wheelSpeed\n    //   // wheel_fr.current.rotation.x += items.scene.wheelSpeed\n    //   // wheel_rr.current.rotation.x += items.scene.wheelSpeed\n    //   setItem()\n    // }\n  })\n  \n  return (\n    <group rotation-y={items.scene.serveAngle_slider.value} ref={group} {...props} dispose={null}\n      onPointerOver={(e) => (e.stopPropagation(), e.object.name ? setHovered(e.object.name) : setHovered(null))}\n      onPointerOut={(e) => e.intersections.length === 0 && setHovered(null)}\n      onPointerMissed={() => (setCurrent(null))}\n      onPointerDown={(e) => (e.stopPropagation(), e.object.name ? (setCurrent(e.object.name)) : setCurrent(null))}>\n      <group position={[0, 0.26, 0]}>\n        <group position={[0.16, 0, 0]}>\n          <group rotation-x={items.wheels.wheelRotation} rotation-y={items.wheels.wheelAngle_slider.value} position={[0.02, -0.11, 0.23]}>\n            {items.wheels.showHubs && <mesh name={'wheels'} geometry={nodes.cap_fl.geometry} material={nodes.cap_fl.material} material-transparent={true} material-aoMapIntensity={1.5} material-roughnessMap={materials.tex_cloud_ref.map} />}\n            <mesh name={'wheels'} geometry={nodes.hub_fl.geometry} material-color={0x1D1D1D} material-roughnessMap={materials.tex_cloud_ref.map} material={nodes.hub_fl.material} />\n            <mesh name={'wheels'} geometry={nodes.tire_fl.geometry} material={nodes.tire_fl.material} material-color={0x333333} material-aoMapIntensity={0.5} material-normalScale={[-2, -2]} material-roughnessMap={materials.tex_cloud_ref.map} />\n          </group>\n          <group rotation-x={items.wheels.wheelRotation} position={[0.02, -0.11, -0.23]}>\n            {items.wheels.showHubs && <mesh name={'wheels'} geometry={nodes.cap_rl.geometry} material={nodes.cap_rl.material} />}\n            <mesh name={'wheels'} geometry={nodes.hub_rl.geometry} material={nodes.hub_rl.material} />\n            <mesh name={'wheels'} geometry={nodes.tire_rl.geometry} material={nodes.tire_rl.material} />\n          </group>\n          <mesh geometry={nodes.boggy_arm_l.geometry} material-color={0x444444} material={nodes.boggy_arm_l.material} position={[-0.16, -0.26, 0]} />\n        </group>\n        <group position={[-0.16, 0, 0]}>\n          <group rotation-x={items.wheels.wheelRotation} rotation-y={items.wheels.wheelAngle_slider.value} position={[-0.02, -0.11, 0.23]}>\n            {items.wheels.showHubs && <mesh name={'wheels'} geometry={nodes.cap_fr.geometry} material={nodes.cap_fr.material} />}\n            <mesh name={'wheels'} geometry={nodes.hub_fr.geometry} material={nodes.hub_fr.material} />\n            <mesh name={'wheels'} geometry={nodes.tire_fr.geometry} material={nodes.tire_fr.material} />\n          </group>\n          <group rotation-x={items.wheels.wheelRotation} position={[-0.02, -0.11, -0.23]}>\n            {items.wheels.showHubs && <mesh name={'wheels'} geometry={nodes.cap_rr.geometry} material={nodes.cap_rr.material} />}\n            <mesh name={'wheels'} geometry={nodes.hub_rr.geometry} material={nodes.hub_rr.material} />\n            <mesh name={'wheels'} geometry={nodes.tire_rr.geometry} material={nodes.tire_rr.material} />\n          </group>\n          <mesh geometry={nodes.boggy_arm_r.geometry} material={nodes.boggy_arm_r.material} position={[0.16, -0.26, 0]} />\n        </group>\n        <group rotation-x={items.lid.open ? -0.9 : 0} position={[0, 0.55, -0.33]}>\n          {/* Lid */}\n          <mesh name={'lid'} geometry={nodes.lid_top.geometry} material={materials.mat_lid_vinyl} position={[0, -0.81, 0.33]} material-roughness={0.5} material-roughnessMap={materials.tex_cloud_ref.map} material-transparent={true} material-map={items.lid.texture} material-opacity={items.lid.texture ? 1 : 0} onUpdate={self => self.material.needsUpdate = true} />\n          <mesh geometry={nodes.lid_top.geometry} material={materials.mat_lid_base} position={[0, -0.81, 0.33]} material-roughnessMap={materials.tex_cloud_ref.map} material-color={items.lid.color} />\n\n          {/* Strip */}\n          <mesh name={'lid'} geometry={nodes.strip.geometry} material-color={0xACACAC} material-roughnessMap={materials.tex_cloud_ref.map} material={nodes.strip.material} position={[0, -0.81, 0.33]} />\n\n          <mesh name={'lid'} geometry={nodes.lid_inside.geometry} material={nodes.lid_inside.material} material-color={0xEEEEEE} material-roughnessMap={materials.tex_cloud_ref.map} position={[0, -0.81, 0.33]} />\n          <mesh name={'lid'} geometry={nodes.lid_liner.geometry} material={nodes.lid_liner.material} material-color={0x111111} material-roughnessMap={materials.tex_cloud_ref.map} position={[0, -0.81, 0.33]} />\n        </group>\n\n        {/* Bin */}\n        <mesh name={'bin'} geometry={nodes.bin.geometry} material={materials.mat_bin_vinyl} material-roughness={0.5} material-roughnessMap={materials.tex_cloud_ref.map} material-transparent={true} position={[0, -0.26, 0]} material-map={items.bin.texture} material-opacity={items.bin.texture ? 1 : 0} onUpdate={self => self.material.needsUpdate = true} />\n        <mesh geometry={nodes.bin.geometry} material={materials.mat_bin_base} material-roughnessMap={materials.tex_cloud_ref.map} position={[0, -0.26, 0]} material-color={items.bin.color} />\n\n        {/* Decals */}\n        <mesh name={'front_decal'} material={materials.mat_front_decal} material-color={0xFFFFFF} material-alphaTest={0.8} material-opacity={items.front_decal.texture ? 1 : 0} material-map={items.front_decal.texture} material-roughnessMap={materials.tex_cloud_ref.map} geometry={nodes.front_decal.geometry} position={[0, -0.26, 0]} onUpdate={self => self.material.needsUpdate = true} />\n        <mesh name={'rear_bottom_decal'} material={materials.mat_rear_bottom_decal} material-color={0xFFFFFF} material-alphaTest={0.8} material-opacity={items.rear_bottom_decal.texture ? 1 : 0} material-map={items.rear_bottom_decal.texture} material-roughnessMap={materials.tex_cloud_ref.map} geometry={nodes.rear_bottom_decal.geometry} position={[0, -0.26, 0]} onUpdate={self => self.material.needsUpdate = true} />\n        <mesh name={'rear_top_decal'} material={materials.mat_rear_top_decal} material-color={0xFFFFFF} material-alphaTest={0.8} material-opacity={items.rear_top_decal.texture ? 1 : 0} material-map={items.rear_top_decal.texture} material-roughnessMap={materials.tex_cloud_ref.map} geometry={nodes.rear_top_decal.geometry} position={[0, -0.26, 0]} onUpdate={self => self.material.needsUpdate = true} />\n        <mesh name={'side_arm_decal'} material={materials.mat_side_arm_aluminum} material-color={items.aluminum.color} material-alphaTest={0.1} material-opacity={items.side_arm_decal.texture ? 1 : 0} material-flatShading={false} material-bumpScale={items.side_arm_decal.engraveDepth_slider.value} material-bumpMap={items.side_arm_decal.texture} material-alphaMap={items.side_arm_decal.texture} material-transparent={true} material-roughnessMap={materials.tex_cloud_ref.map} geometry={nodes.side_arm_decal.geometry} position={[0, -0.26, 0]} onUpdate={self => self.material.needsUpdate = true} />\n\n        {/* Screen */}\n        <mesh geometry={nodes.screen.geometry} material={materials.mat_screen} material-roughnessMap={materials.tex_cloud_ref.map} material-color={0x0A0716} position={[0, -0.26, 0]} />\n\n        {/* Tail lights */}\n        <mesh geometry={nodes.tail_lights.geometry} material={materials.mat_tail_lights} position={[0, -0.26, 0]} />\n\n        {/* Eyes */}\n        <mesh geometry={nodes.eye_lense.geometry} material={nodes.eye_lense.material} position={[0, -0.26, 0]} />\n\n        <mesh name={'aluminum'} geometry={nodes.aluminum.geometry} material={nodes.aluminum.material} material-color={items.aluminum.color} position={[0, -0.26, 0]} />\n        <mesh geometry={nodes.black_glass.geometry} material={materials.mat_lense} material-color={0x0A0716} material-roughnessMap={materials.tex_cloud_ref.map}  position={[0, -0.26, 0]} />\n        <mesh geometry={nodes.black_plastic.geometry} material={nodes.black_plastic.material} material-roughnessMap={materials.tex_cloud_ref.map}  position={[0, -0.26, 0]} />\n        <mesh geometry={nodes.black_plastic_base.geometry} material={nodes.black_plastic_base.material} material-roughnessMap={materials.tex_cloud_ref.map} position={[0, -0.26, 0]} />\n        <mesh geometry={nodes.blocker.geometry} material={materials.mat_light_blocker} material-color={0x111111} position={[0, -0.26, 0]} />\n        <mesh geometry={nodes.eye_plate.geometry} material={materials.mat_metal_black_rough} material-color={0x444444} material-roughnessMap={materials.tex_cloud_ref.map} position={[0, -0.26, 0]} />\n        <mesh geometry={nodes.liner.geometry} material={nodes.liner.material} material-roughnessMap={materials.tex_cloud_ref.map} position={[0, -0.26, 0]} />\n      </group>\n\n      {/* Floor */}\n      {items.scene.showShadow && <mesh material={materials.mat_floor} material-transparent={true} material-color={0x000000} material-alphaMap={materials.tex_floor_ref.map} geometry={nodes.floor.geometry} />}\n    </group>\n  )\n}\n\nuseGLTF.preload('serve.glb')\n","import React, { useRef } from 'react'\nimport { Math } from 'three'\nimport { HexColorPicker } from 'react-colorful'\nimport FormGroup from '@material-ui/core/FormGroup'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Switch from '@material-ui/core/Switch'\nimport { withStyles } from '@material-ui/core/styles'\nimport Slider from '@material-ui/core/Slider';\nimport useStore from './Store'\n\nimport './Customizer.scss'\n\nconst PrettoSlider = withStyles({\n    root: {\n        color: '#52af77',\n        height: 8,\n    },\n    thumb: {\n    height: 24,\n    width: 24,\n    backgroundColor: '#fff',\n    border: '2px solid currentColor',\n    marginTop: -8,\n    marginLeft: -12,\n        '&:focus, &:hover, &$active': {\n            boxShadow: 'inherit',\n        },\n    },\n    active: {},\n    valueLabel: {\n        left: 'calc(-50% + 4px)',\n    },\n    track: {\n        height: 8,\n        borderRadius: 4,\n    },\n    rail: {\n        height: 8,\n        borderRadius: 4,\n    },\n})(Slider)\n\nconst PurpleSwitch = withStyles({\n    switchBase: {\n        color: 'fff',\n        '&$checked': {\n            color: '#52af77',\n        },\n        '&$checked + $track': {\n            backgroundColor: '#52af77',\n        },\n    },\n    checked: {},\n    track: {\n        backgroundColor: 'grey'\n    },\n})(Switch)\n\nexport default (props) => {\n    const [current, setCurrent, items, scene, setItem, loadTexture, rendering, setRendering] = useStore(state => [state.current, state.setCurrent, state.items, state.items.scene, state.setItem, state.loadTexture, state.rendering, state.setRendering])\n    const currentItem = current ? items[current] : null\n    const imageInput = useRef()\n\n    const checkContrast = (hex) => {\n        const threshold = 160 // close to half 256 ~130\n\t\t\t\n        const r = parseInt( hex.substring(1, 3), 16)\n        const g = parseInt( hex.substring(3, 5), 16)\n        const b = parseInt( hex.substring(5, 7), 16)\n            \n        const cBrightness = ((r * 299) + (g * 587) + (b * 114)) / 1000\n        \n        if (cBrightness > threshold) {\n            return 'white'\n        } else { \n            return 'black'\n        }\t\n    }\n\n    const isHex = (h) => {\n        let a = parseInt(h,16);\n        return (a.toString(16) === h)\n    }\n\n    const renderGuide = (show = true) => {\n        if (rendering) {\n            return\n        }\n\n        if (show) {\n            scene.renderWidth = String(scene.width_render_px_slider.value / 2) + 'px'\n            scene.renderHeight = String(scene.height_render_px_slider.value / 2) + 'px'\n        } else {\n            scene.renderWidth = '100%'\n            scene.renderHeight = '100%'\n        }\n        \n        setItem()\n    }\n\n    const render = (action = 'render frame') => {\n        scene.renderWidth = String(scene.width_render_px_slider.value / 2) + 'px'\n        scene.renderHeight = String(scene.height_render_px_slider.value / 2) + 'px'\n        setRendering(true)\n\n        if (action === 'render video') {\n            // const frameCount = 24 * 4\n            // const inc = 6.28319 / frameCount // 360rad\n            // // items.scene.serveAngle_slider.value = 0\n            // // setItem()\n\n            // for (let f = 0; f < frameCount; f++) {\n            //     items.scene.serveAngle_slider.value = (items.scene.serveAngle_slider.value + inc) % 6.28319\n            //     setItem()\n            // }\n        } else {\n            const canvas = document.getElementsByTagName('canvas')[0]\n                    \n            if (canvas) {\n                const url = canvas.toDataURL( 'image/png' )\n                const link = document.createElement('a')\n\n                link.setAttribute('href', url)\n                link.setAttribute('target', '_blank')\n                link.setAttribute('download', 'render')\n\n                link.click()\n            } else {\n                console.warn('Could not find canvas to render from!')\n            }\n        }\n\n        // scene.renderWidth = '100%'\n        // scene.renderHeight = '100%'\n        setRendering(false)\n    }\n\n    return (\n        <div className={`Customizer`}>\n            {currentItem &&\n                <div className={`Actions ${checkContrast(scene.color)}`}> \n                    <div className={`ItemActions ${checkContrast(scene.color)}`}> \n                        {currentItem.color &&\n                            <div className={`ColorPicker`}>\n                                <HexColorPicker className='picker' color={currentItem.color} onChange={(color) => (currentItem.color = color, setItem())} />\n                                <input type='text' value={currentItem.color} onChange={(e) => {\n                                    console.log(e.target.value)\n                                    let str = String(e.target.value)\n                                    str = str.replace('#', '')\n                                    str = str.substring(0, 6)\n                                    \n                                    if (isHex(str)) {\n                                        currentItem.color = '#' + str\n                                    }\n\n                                    setItem()\n                                }}/>\n                            </div>\n                        }\n                        <h1>{currentItem.name}</h1>\n                    </div>\n                    <div className={`OtherActions ${checkContrast(scene.color)}`}>\n                        {'textures' in currentItem &&\n                            <div className={'Textures'}>\n                                {currentItem.textures.map( (texture, index) => {\n                                    return <div className = {`Texture ${ currentItem.selectedIndex === index ? 'active' : ''} ${current}`} \n                                        key = { index }  \n                                        style={{ \n                                            backgroundImage: `url(${texture})`,\n                                            backgroundColor: (current == 'bin' || current == 'lid') ? currentItem.color : items.aluminum.color\n                                        }} \n                                        onClick = {((e) => {\n                                            e.stopPropagation()\n                                            e.preventDefault()\n\n                                            if (currentItem.selectedIndex == index) {\n                                                currentItem.selectedIndex = null\n                                                currentItem.texture = loadTexture(null)\n                                            } else {\n                                                currentItem.selectedIndex = index\n                                                currentItem.texture = loadTexture(texture)\n                                            }\n                                            setItem()\n                                        })}\n                                    />\n                                })}\n                                <div className='addWrap' onClick={()=>{imageInput.current.click()}}>\n                                    + Add\n                                </div>\n                            </div>\n                        }\n                        <FormGroup row className={'sliders'}>\n                            {Object.entries(currentItem).map(([key, value]) => {\n                                if (key.includes('slider')) {\n                                    return <FormControlLabel key={key}\n                                        control={\n                                            <PrettoSlider\n                                                value={((key.includes('angle') || key.includes('Angle')) ? parseInt(Math.radToDeg(currentItem[key].value)) : currentItem[key].value)}\n                                                valueLabelDisplay='auto'\n                                                onChange={(e, val) => (\n                                                    currentItem[key].value = ((key.includes('angle') || key.includes('Angle')) ? Math.degToRad(val) : val), setItem(),\n                                                    key.includes('render_px') ? renderGuide(true) : null\n                                                )}\n                                                step={currentItem[key].step ? currentItem[key].step : 0.01}\n                                                min={currentItem[key].range ? currentItem[key].range[0] : 0}\n                                                max={currentItem[key].range ? currentItem[key].range[1] : 100}\n                                                name={currentItem[key].name ? currentItem[key].name : key}\n                                                color='primary'\n                                                onMouseEnter={(e) => (key.includes('render') ? renderGuide(true) : null)}\n                                                onMouseLeave={(e) => (key.includes('render') ? renderGuide(false) : null)}\n                                            />\n                                        }\n                                        label={currentItem[key].name ? currentItem[key].name : key}\n                                    />\n                                }\n                            })}\n                        </FormGroup>\n                        <FormGroup row className={'switch'}>\n                            {Object.entries(currentItem).map(([key, value]) => {\n                                if (typeof value === 'boolean') {\n                                    return <FormControlLabel key={key}\n                                        control={\n                                            <PurpleSwitch\n                                                checked={value}\n                                                onChange={(e) => (currentItem[key] = e.target.checked, setItem())}\n                                                name={key}\n                                                color='primary'\n                                            />\n                                        }\n                                        label={key}\n                                    />\n                                }\n                            })}\n                        </FormGroup>\n                        <FormGroup row className={'buttons'}>\n                            {Object.entries(currentItem).map(([key, value]) => {\n                                if (key.includes('button')) {\n                                    return <div className={`Button`} key={key}\n                                        onMouseEnter={(e) => (key.includes('render') ? renderGuide(true) : null)}\n                                        onMouseLeave={(e) => (key.includes('render') ? renderGuide(false) : null)}\n                                        onClick={(e)=>{\n                                            e.stopPropagation()\n                                            e.preventDefault()\n\n                                            if (key.includes('render')) {\n                                                render(currentItem[key].action)\n                                            }\n                                        }}>\n                                        {currentItem[key].name}\n                                    </div>\n                                }\n                            })}\n                        </FormGroup>\n                    </div>\n                    <input id='myInput'\n                        type = 'file'\n                        accept = 'image/*'\n                        ref = {imageInput}\n                        style = {{display: 'none'}}\n                        onChange = { (e) => {\n                            e.stopPropagation()\n                            e.preventDefault()\n\n                            // Get the file and name\n                            const file = e.target.files[0]\n                            if (file) {\n                                const url = URL.createObjectURL(file)\n                                \n                                currentItem.textures.push(url)\n                                currentItem.selectedIndex = currentItem.textures.length - 1\n                                currentItem.texture = loadTexture(url)\n\n                                setItem()\n                            }\n                        } }\n                    />\n                </div>\n            }\n            <div className={`GlobalActions ${checkContrast(scene.color)}`}>\n                {/* <FormControlLabel\n                    control={\n                        <PurpleSwitch\n                            checked={background == 'black' ? true : false}\n                            onChange={(e) => (setBackground(background == 'black' ? 'white' : 'black'))}\n                            name={'darkMode'}\n                            color='primary'\n                        />\n                    }\n                    label={`Dark Mode`}\n                /> */}\n                {/* <div className={`Button`}\n                    onClick={(e)=>{\n                        e.stopPropagation()\n                        e.preventDefault()\n\n                        const canvas = document.getElementsByTagName('canvas')[0]\n\n                        if (canvas) {\n                            const url = canvas.toDataURL( 'image/png' )\n                            const link = document.createElement('a')\n\n                            link.setAttribute('href', url)\n                            link.setAttribute('target', '_blank')\n                            link.setAttribute('download', 'render')\n\n                            link.click()\n                        } else {\n                            console.warn('Could not find canvas to render from!')\n                        }\n                    }}>\n                    📷 Save PNG\n                </div> */}\n                <div className={`Button`}\n                    onClick={(e)=>{\n                        e.stopPropagation()\n                        setCurrent('scene')\n                    }}>\n                    Scene and rendering\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React, { Suspense } from 'react'\nimport { Canvas } from '@react-three/fiber'\nimport { Environment, OrbitControls, Stats } from '@react-three/drei'\nimport useStore from './Store'\n\nimport Serve from './Serve'\nimport Customizer from './Customizer'\n\nexport default (props) => {\n    const [setCurrent, scene, rendering] = useStore(state => [state.setCurrent, state.items.scene, state.rendering])\n\n    return (\n        <>\n        <div className={`Scene`}>\n            <Canvas style={{background: scene.color, width: scene.renderWidth, height: scene.renderHeight}} shadows concurrent gl={{ preserveDrawingBuffer: true }} frameloop dpr={[1, 2]} shadows camera={{ position: [1.5, 1, 1.7], fov: 45, near: 0.25, far: 20 }} >\n                <Suspense fallback={null}>\n                    <Serve />\n                    <Environment preset='sunset' /> \n                </Suspense>\n                <OrbitControls target={[0, 0.5, 0]} minDistance={1} maxDistance={5} enableDamping={true} dampingFactor={0.3} minPolarAngle={0.3} maxPolarAngle={1.7} />\n                <hemisphereLight skyColor={'blue'} groundColor={0xffffff} intensity={0.2} position={[0, 50, 0]} />\n                <directionalLight position={[8, 20, 8]} shadow-camera-left={-4} shadow-camera-bottom={-4} shadow-camera-right={16} shadow-camera-top={16} shadow-mapSize-height={1024} shadow-mapSize-width={1024} castShadow />\n                {/* <Stats /> */}\n            </Canvas>\n        </div>\n        <Customizer />\n        </>\n    )\n}","import Scene from './components/Scene';\n\nexport default () => {\n  return (\n    <Scene />\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.scss';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}