/*
auto-generated by: https://github.com/react-spring/gltfjsx
*/

import * as THREE from 'three'
import React, { Suspense, useRef, useState, useEffect } from 'react'
import { useLoader, useFrame, useThree } from 'react-three-fiber'
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'
import { sRGBEncoding, TextureLoader, convertSRGBToLinear } from "three";
import { draco } from 'drei'

export default function Serve(props) {
  const group = useRef();
  const { nodes, materials } = useLoader(GLTFLoader, require('./serve.glb').default, draco('/draco-gltf/'))


  const [hovered, setHover] = useState(false)
  const [active, setActive] = useState(false)

  const [speed, setSpeed] = useState(0)
  const [turnRad, setTurnRad] = useState(0)
  const [lidOpen, setLidOpen] = useState(false)
  const [showHubCaps, setshowHubCaps] = useState(true)

  // const [binDecalUrl, setBinDecalUrl] = useState(props.binDecalUrl) 
  // const [lidDecalUrl, setLidDecalUrl] = useState(props.lidDecalUrl) 
  // const [frontDecalUrl, setFrontDecalUrl] = useState(props.frontDecalUrl) 
  // const [rearTopDecalUrl, setRearTopDecalUrl] = useState(props.rearTopDecalUrl) 
  // const [rearBottomDecalUrl, setRearBottomDecalUrl] = useState(props.rearBottomDecalUrl) 

  // const [binColor, setBinColor] = useState(props.binColor) 
  // const [lidColor, setLidColor] = useState(props.lidColor) 

  // const [binDecalRoughness, setBinDecalRoughness] = useState(props.binDecalRoughness) 
  // const [lidDecalRoughness, setLidDecalRoughness] = useState(props.lidDecalRoughness) 
  // const [frontDecalRoughness, setFrontDecalRoughness] = useState(props.frontDecalRoughness) 
  // const [rearTopDecalRoughness, setRearTopDecalRoughness] = useState(props.rearTopDecalRoughness) 
  // const [rearBottomDecalRoughness, setRearBottomDecalRoughness] = useState(props.rearBottomDecalRoughness) 

  // var binDecal = null
  // var lidDecal = null
  // var frontDecal = null
  // var rearTopDecal = null
  // var rearBottomDecal = null
  // const [binDecal, setBinDecal] = useState( (props.binDecalUrl ? useLoader(TextureLoader, props.binDecalUrl) : null) ) 
  // const [binDecalUrl, setBinDecal] = useState(props.binDecalUrl) 
  // console.log((props.binDecalUrl !== null ? "yes" : "nooooo"))
  // const binDecal = useLoader(TextureLoader, 'https://images.pexels.com/photos/302804/pexels-photo-302804.jpeg');
  // const binDecal = useLoader(TextureLoader, props.binDecalUrl);
  // binDecal.flipY = false;
  // binDecal.encoding = THREE.sRGBEncoding
  // https://images.pexels.com/photos/302804/pexels-photo-302804.jpeg
  // const binDecal = useLoader(TextureLoader, 'https://images.pexels.com/photos/302804/pexels-photo-302804.jpeg');
  // const [lidDecal, setLidDecal] = useState(null) 
  // const [frontDecal, setFrontDecal] = useState(null) 
  // const [rearTopDecal, setRearTopDecal] = useState(null) 
  // const [rearBottomDecal, setRearBottomDecal] = useState(null) 


  // useEffect(() => {
  //   console.log("things!")

  //   // console.log(props.binDecalUrl);
  //   // setBinDecal("yolo");
  //   // const [img] = useLoader(THREE.TextureLoader, [props.binDecalUrl]);
  //   // const test = ((props.binDecalUrl !== null) ? (useLoader(THREE.TextureLoader, props.binDecalUrl)) : null);
  //   // setBinDecal((props.binDecalUrl ? useLoader(THREE.TextureLoader, props.binDecalUrl) : null))

  //   // binDecal = (props.binDecalUrl ? useLoader(TextureLoader, props.binDecalUrl) : null)
  //   // lidDecal = (lidDecalUrl ? useLoader(THREE.TextureLoader, lidDecalUrl) : null)
  //   // frontDecal = (frontDecalUrl ? useLoader(THREE.TextureLoader, frontDecalUrl) : null)
  //   // rearTopDecal = (rearTopDecalUrl ? useLoader(THREE.TextureLoader, rearTopDecalUrl) : null)
  //   // rearBottomDecal = (rearBottomDecalUrl ? useLoader(THREE.TextureLoader, rearBottomDecalUrl) : null)
  // }, [props]);

  // const loadDecal = (url) => {
  //   const img = (url ? useLoader(TextureLoader, url) : null)
  //   if (url) {
  //     img.flipY = false;
  //     img.encoding = sRGBEncoding;
  //   }

  //   return img;
  // }
  

  return (
    <group ref={group} {...props} dispose={null}
      // onClick={e => setActive(!active)}
      // onPointerOver={e => setHover(true)}
      // onPointerOut={e => setHover(false)}>
      >
      <group position={[0, 0.26, 0]}>
        <group position={[0.16, 0, 0]}>
          <group position={[0.02, -0.11, 0.23]}>
            <mesh material={materials.mat_aluminum} material-aoMapIntensity={1.5} material-color={0xe8c6e1} material-roughnessMap={materials.tex_cloud_ref.map} geometry={nodes.cap_fl.geometry} />
            <mesh material={materials.mat_metal_black_smooth} material-color={0x1D1D1D} material-roughnessMap={materials.tex_cloud_ref.map} geometry={nodes.hub_fl.geometry} />
            <mesh material={materials.mat_tire} material-color={0x111111} material-aoMapIntensity={0.5} material-normalScale={[-2, -2]} material-roughnessMap={materials.tex_cloud_ref.map} geometry={nodes.tire_fl.geometry} />
          </group>
          <group position={[0.02, -0.11, -0.23]}>
            <mesh material={materials.mat_aluminum} geometry={nodes.cap_rl.geometry} />
            <mesh material={materials.mat_metal_black_smooth} geometry={nodes.hub_rl.geometry} />
            <mesh material={materials.mat_tire} geometry={nodes.tire_rl.geometry} />
          </group>
          <mesh
            material={materials.mat_metal_black_smooth}
            geometry={nodes.boggy_arm_l.geometry}
            position={[-0.16, -0.26, 0]}
          />
        </group>
        <group position={[-0.16, 0, 0]}>
          <group position={[-0.02, -0.11, 0.23]}>
            <mesh material={materials.mat_aluminum} geometry={nodes.cap_fr.geometry} />
            <mesh material={materials.mat_metal_black_smooth} geometry={nodes.hub_fr.geometry} />
            <mesh material={materials.mat_tire} geometry={nodes.tire_fr.geometry} />
          </group>
          <group position={[-0.02, -0.11, -0.23]}>
            <mesh material={materials.mat_aluminum} geometry={nodes.cap_rr.geometry} />
            <mesh material={materials.mat_metal_black_smooth} geometry={nodes.hub_rr.geometry} />
            <mesh material={materials.mat_tire} geometry={nodes.tire_rr.geometry} />
          </group>
          <mesh
            material={materials.mat_metal_black_smooth}
            geometry={nodes.boggy_arm_r.geometry}
            position={[0.16, -0.26, 0]}
          />
        </group>
        <group position={[0, 0.55, -0.33]}>
          <mesh
            material={materials.mat_plastic_white}
            material-color={0xEEEEEE}
            material-roughnessMap={materials.tex_cloud_ref.map}
            geometry={nodes.lid_inside.geometry}
            position={[0, -0.81, 0.33]}
          />
          <mesh
            material={materials.mat_plastic_black}
            material-color={0x111111}
            material-roughnessMap={materials.tex_cloud_ref.map}
            geometry={nodes.lid_liner.geometry}
            position={[0, -0.81, 0.33]}
          />
          <mesh material={materials.mat_strip_eyes} material-color={0xACACAC} material-roughnessMap={materials.tex_cloud_ref.map} geometry={nodes.strip.geometry} position={[0, -0.81, 0.33]} />
          <mesh 
            geometry={nodes.lid_top.geometry} 
            geometry-groups={[{start: 0, count: Infinity, materialIndex: 0}, {start: 0, count: Infinity, materialIndex: 1}]} 
            position={[0, -0.81, 0.33]}>
            <meshPhysicalMaterial attachArray="material" color={props.lidColor} onUpdate={self => (self.color.set(props.lidColor), self.color.convertSRGBToLinear())} roughness={0.4} roughnessMap={materials.tex_cloud_ref.map} color={0xFFFFFF} aoMap={materials.mat_lid_base.aoMap} />
            <meshPhysicalMaterial attachArray="material" map={useLoader(TextureLoader, props.lidDecalUrl)} onUpdate={self => props.lidDecalUrl && (self.map.flipY = false, self.map.encoding = sRGBEncoding)} roughness={0.5} roughnessMap={materials.tex_cloud_ref.map} color={0xFFFFFF} aoMap={materials.mat_lid_base.aoMap} transparency={0} opacity={1} transparent />
          </mesh>
        </group>
        <mesh material={materials.mat_aluminum} geometry={nodes.aluminum.geometry} position={[0, -0.26, 0]} />
        <mesh 
          geometry={nodes.bin.geometry} 
          geometry-groups={[{start: 0, count: Infinity, materialIndex: 0}, {start: 0, count: Infinity, materialIndex: 1}]} 
          position={[0, -0.26, 0]}>
            <meshPhysicalMaterial attachArray="material" color={props.binColor} onUpdate={self => (self.color.set(props.binColor), self.color.convertSRGBToLinear())} roughness={0.4} roughnessMap={materials.tex_cloud_ref.map} color={0xFFFFFF} aoMap={materials.mat_bin_base.aoMap} />
            <meshPhysicalMaterial attachArray="material" map={useLoader(TextureLoader, props.binDecalUrl)} onUpdate={self => props.binDecalUrl && (self.map.flipY = false, self.map.encoding = sRGBEncoding)} roughness={0.5} roughnessMap={materials.tex_cloud_ref.map} color={0xFFFFFF} aoMap={materials.mat_bin_base.aoMap} transparency={0} opacity={1} transparent />
        </mesh>

        <mesh material={materials.mat_lense} material-color={0x0A0716} geometry={nodes.black_glass.geometry} position={[0, -0.26, 0]} />
        <mesh material={materials.mat_plastic_black} geometry={nodes.black_plastic.geometry} position={[0, -0.26, 0]} />
        <mesh
          material={materials.mat_plastic_black}
          geometry={nodes.black_plastic_base.geometry}
          position={[0, -0.26, 0]}
        />
        <mesh material={materials.mat_light_blocker} material-color={0x111111} geometry={nodes.blocker.geometry} position={[0, -0.26, 0]} />
        <mesh material={materials.mat_strip_eyes} geometry={nodes.eye_lense.geometry} position={[0, -0.26, 0]} />
        <mesh material={materials.mat_metal_black_rough} material-color={0x1D1D1D} material-roughnessMap={materials.tex_cloud_ref.map} geometry={nodes.eye_plate.geometry} position={[0, -0.26, 0]} />
        <mesh material={materials.mat_plastic_white} material-roughnessMap={materials.tex_cloud_ref.map} geometry={nodes.liner.geometry} position={[0, -0.26, 0]} />
        <mesh material={materials.mat_screen} material-color={0x0A0716} material-roughnessMap={materials.tex_cloud_ref.map} geometry={nodes.screen.geometry} position={[0, -0.26, 0]} />
        <mesh material={materials.mat_tail_lights} material-color={0x9F1313} material-roughnessMap={materials.tex_cloud_ref.map} geometry={nodes.tail_lights.geometry} position={[0, -0.26, 0]} />
        {/* All need refs and when to show, load in textures */}
        {/* <mesh material={materials.mat_front_decal} geometry={nodes.front_decal.geometry} position={[0, -0.26, 0]} />
        <mesh material={materials.mat_rear_bottom_decal} geometry={nodes.rear_bottom_decal.geometry} position={[0, -0.26, 0]} />
        <mesh material={materials.mat_rear_top_decal} geometry={nodes.rear_top_decal.geometry} position={[0, -0.26, 0]} /> */}
        {/* all refs can get deleted */}
        {/* <mesh material={materials.tex_cloud_ref} geometry={nodes.tex_cloud_ref.geometry} position={[0, -0.29, 0]} /> */}
        {/* <mesh material={materials.tex_floor_ref} geometry={nodes.tex_floor_ref.geometry} position={[0, -0.29, 0]} /> */}
        {/* <mesh material={materials.mat_bin_vinyl} geometry={nodes.mat_bin_vinyl_ref.geometry} position={[0, -0.29, 0]} /> */}
        {/* <mesh material={materials.mat_lid_vinyl} geometry={nodes.mat_lid_vinyl_ref.geometry} position={[0, -0.29, 0]} /> */}
      </group>
      <mesh material={materials.mat_floor} material-color={0x000000} material-alphaMap={materials.tex_floor_ref.map} geometry={nodes.floor.geometry} />
    </group>
  )
}
