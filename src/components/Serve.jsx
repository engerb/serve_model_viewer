/*
auto-generated by: https://github.com/react-spring/gltfjsx
*/

// import * as THREE from 'three'
import React, { useRef, useState, useEffect } from 'react'
import { useLoader, useFrame, useThree, invalidate } from 'react-three-fiber'
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'
// import { sRGBEncoding, TextureLoader, convertSRGBToLinear } from "three";
import { draco } from 'drei'

import useStore from './Store';

export default function Serve(props) {
  const group = useRef();
  const { nodes, materials } = useLoader(GLTFLoader, require('../assets/3d/Serve/serve.glb').default, draco('/draco-gltf/'))

  const binDecalUrl = useStore(state => state.binDecalUrl)
  const lidDecalUrl = useStore(state => state.lidDecalUrl)
  const frontDecalUrl = useStore(state => state.frontDecalUrl)
  const rearTopDecalUrl = useStore(state => state.rearTopDecalUrl)
  const rearBottomDecalUrl = useStore(state => state.rearBottomDecalUrl)
  const binColor = useStore(state => state.binColor)
  const lidColor = useStore(state => state.lidColor)

  const testMethodBin = useStore(state => state.testMethodBin)
  const testMethodLid = useStore(state => state.testMethodLid)

  // Set up state for the hovered and active state
  const [hovered, setHover] = useState(false)
  const [active, setActive] = useState(false)

  // useFrame(() => {
  //   if (active) {
  //     // group.current.rotation.x = group.current.rotation.y += 0.01;
  //     group.current.rotation.y += 0.01;
  //     invalidate();
  //   }
  // })
  // Turn off backface culling

  return (
    <group 
      ref={group}
      // onClick={(e) => setActive(!active)}
      // onPointerOver={(e) => setHover(true)}
      // onPointerOut={(e) => setHover(false)}
      {...props}
      dispose={null} >
      <group position={[0, 0.26, 0]}>
        <group position={[0.16, 0, 0]}>
          <group position={[0.02, -0.11, 0.23]}>
            <mesh material={materials.mat_aluminum} material-aoMapIntensity={1.5} material-color={0xe8c6e1} material-roughnessMap={materials.tex_cloud_ref.map} geometry={nodes.cap_fl.geometry} />
            <mesh material={materials.mat_metal_black_smooth} material-color={0x1D1D1D} material-roughnessMap={materials.tex_cloud_ref.map} geometry={nodes.hub_fl.geometry} />
            <mesh material={materials.mat_tire} material-color={0x111111} material-aoMapIntensity={0.5} material-normalScale={[-2, -2]} material-roughnessMap={materials.tex_cloud_ref.map} geometry={nodes.tire_fl.geometry} />
          </group>
          <group position={[0.02, -0.11, -0.23]}>
            <mesh material={materials.mat_aluminum} geometry={nodes.cap_rl.geometry} />
            <mesh material={materials.mat_metal_black_smooth} geometry={nodes.hub_rl.geometry} />
            <mesh material={materials.mat_tire} geometry={nodes.tire_rl.geometry} />
          </group>
          <mesh
            material={materials.mat_metal_black_smooth}
            geometry={nodes.boggy_arm_l.geometry}
            position={[-0.16, -0.26, 0]}
          />
        </group>
        <group position={[-0.16, 0, 0]}>
          <group position={[-0.02, -0.11, 0.23]}>
            <mesh material={materials.mat_aluminum} geometry={nodes.cap_fr.geometry} />
            <mesh material={materials.mat_metal_black_smooth} geometry={nodes.hub_fr.geometry} />
            <mesh material={materials.mat_tire} geometry={nodes.tire_fr.geometry} />
          </group>
          <group position={[-0.02, -0.11, -0.23]}>
            <mesh material={materials.mat_aluminum} geometry={nodes.cap_rr.geometry} />
            <mesh material={materials.mat_metal_black_smooth} geometry={nodes.hub_rr.geometry} />
            <mesh material={materials.mat_tire} geometry={nodes.tire_rr.geometry} />
          </group>
          <mesh
            material={materials.mat_metal_black_smooth}
            geometry={nodes.boggy_arm_r.geometry}
            position={[0.16, -0.26, 0]}
          />
        </group>
        <group position={[0, 0.55, -0.33]}>
          <mesh
            material={materials.mat_plastic_white}
            material-color={0xEEEEEE}
            material-roughnessMap={materials.tex_cloud_ref.map}
            geometry={nodes.lid_inside.geometry}
            position={[0, -0.81, 0.33]}
          />
          <mesh
            material={materials.mat_plastic_black}
            material-color={0x111111}
            material-roughnessMap={materials.tex_cloud_ref.map}
            geometry={nodes.lid_liner.geometry}
            position={[0, -0.81, 0.33]}
          />
          <mesh material={materials.mat_strip_eyes} material-color={0xACACAC} material-roughnessMap={materials.tex_cloud_ref.map} geometry={nodes.strip.geometry} position={[0, -0.81, 0.33]} />
          <mesh 
            geometry={nodes.lid_top.geometry} 
            material={materials.mat_lid_vinyl}
            material-roughnessMap={materials.tex_cloud_ref.map}
            material-map={lidDecalUrl}
            material-transparent={true}
            onClick={testMethodLid}
            position={[0, -0.81, 0.33]} />
          <mesh 
            geometry={nodes.lid_top.geometry} 
            material={materials.mat_lid_base}
            material-color={lidColor}
            material-roughnessMap={materials.tex_cloud_ref.map}
            onUpdate={self => (
              self.material.color.set(lidColor), 
              self.material.color.convertSRGBToLinear())}
            position={[0, -0.81, 0.33]} />
          </group>
        <mesh material={materials.mat_aluminum} geometry={nodes.aluminum.geometry} position={[0, -0.26, 0]} />
        <mesh 
          geometry={nodes.bin.geometry} 
          material={materials.mat_bin_vinyl}
          material-roughnessMap={materials.tex_cloud_ref.map}
          material-map={binDecalUrl}
          material-transparent={true}
          onClick={testMethodBin}
          position={[0, -0.26, 0]} />
        <mesh 
          geometry={nodes.bin.geometry} 
          material={materials.mat_bin_base}
          material-color={binColor}
          material-roughnessMap={materials.tex_cloud_ref.map}
          onUpdate={self => (
            self.material.color.set(binColor), 
            self.material.color.convertSRGBToLinear())}
          position={[0, -0.26, 0]} />

        <mesh material={materials.mat_lense} material-color={0x0A0716} geometry={nodes.black_glass.geometry} position={[0, -0.26, 0]} />
        <mesh material={materials.mat_plastic_black} geometry={nodes.black_plastic.geometry} position={[0, -0.26, 0]} />
        <mesh
          material={materials.mat_plastic_black}
          geometry={nodes.black_plastic_base.geometry}
          position={[0, -0.26, 0]}
        />
        <mesh material={materials.mat_light_blocker} material-color={0x111111} geometry={nodes.blocker.geometry} position={[0, -0.26, 0]} />
        <mesh material={materials.mat_strip_eyes} geometry={nodes.eye_lense.geometry} position={[0, -0.26, 0]} />
        <mesh material={materials.mat_metal_black_rough} material-color={0x1D1D1D} material-roughnessMap={materials.tex_cloud_ref.map} geometry={nodes.eye_plate.geometry} position={[0, -0.26, 0]} />
        <mesh material={materials.mat_plastic_white} material-roughnessMap={materials.tex_cloud_ref.map} geometry={nodes.liner.geometry} position={[0, -0.26, 0]} />
        <mesh material={materials.mat_screen} material-color={0x0A0716} material-roughnessMap={materials.tex_cloud_ref.map} geometry={nodes.screen.geometry} position={[0, -0.26, 0]} />
        <mesh material={materials.mat_tail_lights} material-color={0x9F1313} material-roughnessMap={materials.tex_cloud_ref.map} geometry={nodes.tail_lights.geometry} position={[0, -0.26, 0]} />
        {/* All need refs and when to show, load in textures */}
        {/* <mesh material={materials.mat_front_decal} geometry={nodes.front_decal.geometry} position={[0, -0.26, 0]} />
        <mesh material={materials.mat_rear_bottom_decal} geometry={nodes.rear_bottom_decal.geometry} position={[0, -0.26, 0]} />
        <mesh material={materials.mat_rear_top_decal} geometry={nodes.rear_top_decal.geometry} position={[0, -0.26, 0]} /> */}
        {/* all refs can get deleted */}
        {/* <mesh material={materials.tex_cloud_ref} geometry={nodes.tex_cloud_ref.geometry} position={[0, -0.29, 0]} /> */}
        {/* <mesh material={materials.tex_floor_ref} geometry={nodes.tex_floor_ref.geometry} position={[0, -0.29, 0]} /> */}
        {/* <mesh material={materials.mat_bin_vinyl} geometry={nodes.mat_bin_vinyl_ref.geometry} position={[0, -0.29, 0]} /> */}
        {/* <mesh material={materials.mat_lid_vinyl} geometry={nodes.mat_lid_vinyl_ref.geometry} position={[0, -0.29, 0]} /> */}
      </group>
      <mesh material={materials.mat_floor} material-color={0x000000} material-alphaMap={materials.tex_floor_ref.map} geometry={nodes.floor.geometry} />
    </group>
  )
}
