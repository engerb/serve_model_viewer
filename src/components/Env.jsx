/*
auto-generated by: https://github.com/react-spring/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useLoader, invalidate, useFrame } from 'react-three-fiber'
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'
import { FrontSide, Color } from 'three'
import { draco } from 'drei'

export default (props) => {
  const group = useRef()
  const { nodes, materials } = useLoader(GLTFLoader, require('../assets/3d/env/env.glb').default, draco('/draco-gltf/'))

  useFrame(() => {
    if (props.rollScene) {
      if (group.current.position.z < (-6.7 * 10)) {
        group.current.position.z = 0
      } else {
        group.current.position.z -= 0.02
      }

      invalidate()
    }
  })

  const black = () => {
    return <MeshLambertMaterial />
  }

  const house1 = (newStyle, placement=0) => {
    const width = 6.7
    const style = {
      trim1: 0xE3E0EA, 
      trim2: 0xE3E0EA,
      midWallColor: 0xEAD7B2,
      midWallMat: 'plaster', // brick, paintedBrick, slats
      bottomWallColor: 0x9C8A66,
      bottomWallMat: 'tile', // brick, paintedBrick, plaster, slats
      garage: 0xEAE3CF, 
      roof: 0xEBEBEB,
      stairs: 0xEAE2D3,
      stairsSideColor: 0xEAE2D3,
      stairsSideMat: 'brick', // paintedBrick
      sidesColor: 0xEAE2D3,
      sidesMat: 'slats', // brick, paintedBrick, plaster
      ...newStyle
    }

    return <group position={[0, 0, placement * width]}>
      <mesh material={props.lidarOnly ? {black} : materials.mat_glassHouse} material-side={FrontSide} material-opacity={0.5} material-transparent={true} geometry={nodes.glass_house1.geometry} />
      <mesh material={props.lidarOnly ? {black} : materials.mat_vent} castShadow receiveShadow geometry={nodes.vent_house1.geometry} />
      <mesh material={props.lidarOnly ? {black} : materials.mat_bottom_house1} material-color={style.bottomWallColor} material-side={FrontSide} castShadow receiveShadow geometry={nodes.bottom_house1.geometry} />
      <mesh material={black} castShadow receiveShadow geometry={nodes.brick_house1.geometry}>
        {!props.lidarOnly &&
          <meshPhysicalMaterial 
          attach='material' 
          clone={materials.mat_brick_house1}
          map={style.stairsSideMat === 'brick' ? materials.tex_brick_diffuse_ref.map : null}
          side={FrontSide}
          color={style.stairsSideColor} 
          />
        }
      </mesh>
      <mesh material={props.lidarOnly ? {black} : materials.mat_garage_house1} material-color={style.garage} material-side={FrontSide} castShadow receiveShadow geometry={nodes.garage_house1.geometry} />
      <mesh material={props.lidarOnly ? {black} : materials.mat_glassBlack} material-side={FrontSide} castShadow receiveShadow geometry={nodes.garageGlass_house1.geometry} />
      <mesh material={props.lidarOnly ? {black} : materials.mat_gutter_house1} material-side={FrontSide} castShadow receiveShadow geometry={nodes.gutter_house1.geometry} />
      <mesh material={props.lidarOnly ? {black} : materials.mat_inside_house1} material-side={FrontSide} castShadow receiveShadow geometry={nodes.inside_house1.geometry} />
      <mesh material={props.lidarOnly ? {black} : materials.mat_midWall_house1} material-color={style.midWallColor} material-side={FrontSide} castShadow receiveShadow geometry={nodes.midWall_house1.geometry} />
      <mesh material={props.lidarOnly ? {black} : materials.mat_roofUnder_house1} material-color={style.roof} material-side={FrontSide} castShadow receiveShadow geometry={nodes.roofUnder_house1.geometry} />
      <mesh material={props.lidarOnly ? {black} : materials.mat_houseSides_house1} material-side={FrontSide} castShadow receiveShadow geometry={nodes.sides_house1.geometry} />
      <mesh material={props.lidarOnly ? {black} : materials.mat_sidewalk_house1} material-side={FrontSide} castShadow receiveShadow geometry={nodes.sidewalk_house1.geometry} />
      <mesh material={props.lidarOnly ? {black} : materials.mat_stairs_house1} material-color={style.stairs} material-side={FrontSide} castShadow receiveShadow geometry={nodes.stairs_house1.geometry} />
      <mesh material={props.lidarOnly ? {black} : materials.mat_trim2_house1} material-color={style.trim2} material-side={FrontSide} castShadow receiveShadow geometry={nodes.trim2_house1.geometry} />
      <mesh material={props.lidarOnly ? {black} : materials.mat_trim_house1} material-color={style.trim1} material-side={FrontSide} castShadow receiveShadow geometry={nodes.trim_house1.geometry} />
    </group>
  }

  const house2 = (newStyle, placement = 0) => {
    const width = 6.7

    return <group position={[0, 0, placement * width]}>
      <mesh material={props.lidarOnly ? {black} : materials.mat_bottom_house2} material-side={FrontSide} castShadow receiveShadow geometry={nodes.bottom_house2.geometry} />
      <mesh material={props.lidarOnly ? {black} : materials.mat_garage_house2} material-side={FrontSide} castShadow receiveShadow geometry={nodes.garage_house2.geometry} />
      <mesh material={props.lidarOnly ? {black} : materials.mat_glassHouse} material-side={FrontSide} material-opacity={0.5} material-transparent={true} geometry={nodes.glass_house2.geometry} />
      <mesh material={props.lidarOnly ? {black} : materials.mat_gutter_house2} material-side={FrontSide} castShadow receiveShadow geometry={nodes.gutter_house2.geometry} />
      <mesh material={props.lidarOnly ? {black} : materials.mat_inside_house2} material-side={FrontSide} castShadow receiveShadow geometry={nodes.inside_house2.geometry} />
      <mesh material={props.lidarOnly ? {black} : materials.mat_midWall_house2} material-side={FrontSide} castShadow receiveShadow geometry={nodes.midWall_house2.geometry} />
      <mesh material={props.lidarOnly ? {black} : materials.mat_houseSides_house2} material-side={FrontSide} castShadow receiveShadow geometry={nodes.sides_house2.geometry} />
      <mesh material={props.lidarOnly ? {black} : materials.mat_sidewalk_house2} material-side={FrontSide} castShadow receiveShadow geometry={nodes.sidewalk_house2.geometry} />
      <mesh material={props.lidarOnly ? {black} : materials.mat_slabs_house2} material-side={FrontSide} castShadow receiveShadow geometry={nodes.slabs_house2.geometry} />
      <mesh material={props.lidarOnly ? {black} : materials.mat_trim_house2} material-side={FrontSide} castShadow receiveShadow geometry={nodes.trim_house2.geometry} />
      <mesh material={props.lidarOnly ? {black} : materials.mat_vent} castShadow receiveShadow geometry={nodes.vent_house2.geometry} />
    </group>
  }
  
  const house3 = (newStyle, placement = 0) => {
    const width = 6.7
    const style = {
      color: 0x447DB1,
      ...newStyle
    }

    return <group position={[0, 0, placement * width]}>
      <mesh material={props.lidarOnly ? {black} : materials.mat_glassHouse} material-side={FrontSide} material-opacity={0.5} material-transparent={true} geometry={nodes.glass_house3.geometry} />
      <mesh material={props.lidarOnly ? {black} : materials.mat_vent} castShadow receiveShadow geometry={nodes.vent_house3.geometry} />
      <mesh material={props.lidarOnly ? {black} : materials.mat_gutter_house3} material-side={FrontSide} castShadow receiveShadow geometry={nodes.gutter_house3.geometry} />
      <mesh material={props.lidarOnly ? {black} : materials.mat_inside_house3} material-side={FrontSide} castShadow receiveShadow geometry={nodes.inside_house3.geometry} />
      <mesh material={props.lidarOnly ? {black} : materials.mat_houseSides_house3} material-side={FrontSide} castShadow receiveShadow geometry={nodes.sides_house3.geometry} />
      <mesh material={props.lidarOnly ? {black} : materials.mat_sidewalk_house3} material-side={FrontSide} castShadow receiveShadow geometry={nodes.sidewalk_house3.geometry} />
      <mesh material={props.lidarOnly ? {black} : materials.mat_terracotta_house3} material-side={FrontSide} castShadow receiveShadow geometry={nodes.terracotta_house3.geometry} />
      <mesh material={props.lidarOnly ? {black} : materials.mat_trim_house3} material-side={FrontSide} castShadow receiveShadow geometry={nodes.trim_house3.geometry} />
      <mesh material={black} castShadow receiveShadow geometry={nodes.wall_house3.geometry}>
        {!props.lidarOnly &&
          <meshPhysicalMaterial 
              attach='material' 
              clone={materials.mat_wall_house3}
              side={FrontSide}
              color={new Color(style.color).convertSRGBToLinear()} 
              aoMap={materials.mat_wall_house3.aoMap} 
              normalMap={materials.mat_wall_house3.normalMap} 
              roughness={materials.mat_wall_house3.roughness} 
              />
        }
      </mesh>
    </group>
  }
  
  const tree1 = (posZ=0) => {
    return <group position={[1.19, 0, posZ]} rotation={[0, 1.11, 0]}>
      <mesh material={props.lidarOnly ? {black} : materials.mat_treeCanopy} castShadow material-transparent={true} receiveShadow geometry={nodes.treeCanopy.geometry} />
      <mesh material={props.lidarOnly ? {black} : materials.mat_treeTrunk} material-side={FrontSide} castShadow receiveShadow geometry={nodes.treeTrunk.geometry} />
    </group>
  }

  const usps = (posZ=0) => {
    return <mesh material={props.lidarOnly ? {black} : materials.mat_mailbox} material-side={FrontSide} castShadow receiveShadow geometry={nodes.mailbox.geometry} position={[1.3, 0.01, posZ]} />
  }

  const powerPole = (posZ=0) => {
    return <group position={[1.34, 0, posZ]}>
      <mesh material={props.lidarOnly ? {black} : materials.mat_powerPole} material-side={FrontSide} castShadow receiveShadow geometry={nodes['Circle.016_0'].geometry} />
      <mesh material={props.lidarOnly ? {black} : materials.mat_powerLine} material-side={FrontSide} castShadow receiveShadow geometry={nodes['Circle.016_1'].geometry} />
    </group>
  }

  const pavedSegment = (type, placement = 0) => {
    const width = 3.35

    if (type === 'ramp') {
      return <group position={[0, 0, placement * width]}>
        <mesh material={props.lidarOnly ? {black} : materials.mat_sidewalk} material-roughnessMap={materials.tex_sidewalk1_roughness_ref.map} material-side={FrontSide} receiveShadow geometry={nodes.sidewalkCut.geometry} />
        <mesh material={props.lidarOnly ? {black} : materials.mat_curb} material-roughnessMap={materials.tex_sidewalk1_roughness_ref.map} material-side={FrontSide} receiveShadow geometry={nodes.curb_cut.geometry} />
        <mesh material={props.lidarOnly ? {black} : materials.mat_road} material-roughnessMap={materials.tex_road_roughness_ref.map} material-side={FrontSide} receiveShadow geometry={nodes.road.geometry} />
      </group>
    } else if (type === 'planter') {
      return <group position={[0, 0, placement * width]}>
        <mesh material={props.lidarOnly ? {black} : materials.mat_planter} material-roughnessMap={materials.tex_dirt_roughness_ref.map} material-side={FrontSide} receiveShadow geometry={nodes.dirt.geometry}/>
        <mesh material={props.lidarOnly ? {black} : materials.mat_sidewalk} material-roughnessMap={materials.tex_sidewalk1_roughness_ref.map} material-side={FrontSide} receiveShadow geometry={nodes.sidewalkPlanters.geometry}/>
        <mesh material={props.lidarOnly ? {black} : materials.mat_curb} material-roughnessMap={materials.tex_sidewalk1_roughness_ref.map} material-side={FrontSide} receiveShadow geometry={nodes.curb.geometry} />
        <mesh material={props.lidarOnly ? {black} : materials.mat_road} material-roughnessMap={materials.tex_road_roughness_ref.map} material-side={FrontSide} receiveShadow geometry={nodes.road.geometry} />
      </group>
    } else {
      return <group position={[0, 0, placement * width]}>
        <mesh material={props.lidarOnly ? {black} : materials.mat_sidewalk} material-roughnessMap={materials.tex_sidewalk1_roughness_ref.map} material-side={FrontSide} receiveShadow geometry={nodes.sidewalk_main.geometry} />
        <mesh material={props.lidarOnly ? {black} : materials.mat_curb} material-roughnessMap={materials.tex_sidewalk1_roughness_ref.map} material-side={FrontSide} receiveShadow geometry={nodes.curb.geometry} />
        <mesh material={props.lidarOnly ? {black} : materials.mat_road} material-roughnessMap={materials.tex_road_roughness_ref.map} material-side={FrontSide} receiveShadow geometry={nodes.road.geometry} />
      </group>
    }
  }

  return (
    <group ref={group} {...props} dispose={null}>
      {house2({}, -4)}
      {house3({}, -3)}
      {house3({color: 0xBCAC9A}, -2)}
      {house3({color: 0x7D795F}, -1)}
      {house2({}, 0)}
      {house1({}, 1)}
      {/* {house1({trim2: 0x646A5A, trim1: 0xADAEA7, midWallColor: 0x646A5A, bottomWallColor: 0x646A5A, stairsSideMat: 'paintedBrick'}, 2)} */}
      {house1({stairsSideMat: 'paintedBrick'}, 2)}
      {house2({}, 3)}
      {house2({}, 4)}
      {house3({color: 0x9779A5}, 5)}
      {house2({}, 6)}
      {house3({}, 7)}
      {house3({color: 0xBCAC9A}, 8)}
      {house3({color: 0x7D795F}, 9)}
      {house2({}, 10)}
      
      {pavedSegment('ramp', -8)}
      {pavedSegment('ramp', -7)}
      {pavedSegment('planter', -6)}
      {pavedSegment('', -5)}
      {pavedSegment('ramp', -4)}
      {pavedSegment('planter', -3)}
      {pavedSegment('ramp', -2)}
      {pavedSegment('planter', -1)}
      {pavedSegment('ramp', 0)}
      {pavedSegment('planter', 1)}
      {pavedSegment('', 2)}
      {pavedSegment('', 3)}
      {pavedSegment('ramp', 4)}
      {pavedSegment('ramp', 5)}
      {pavedSegment('planter', 6)}
      {pavedSegment('ramp', 7)}
      {pavedSegment('planter', 8)}
      {pavedSegment('ramp', 9)}
      {pavedSegment('planter', 10)}
      {pavedSegment('ramp', 11)}
      {pavedSegment('ramp', 12)}
      {pavedSegment('ramp', 13)}
      {pavedSegment('planter', 14)}
      {pavedSegment('', 15)}
      {pavedSegment('ramp', 16)}
      {pavedSegment('planter', 17)}
      {pavedSegment('ramp', 18)}
      {pavedSegment('planter', 19)}
      {pavedSegment('ramp', 20)}
      {pavedSegment('planter', 21)}

      {tree1(2.3)}
      {tree1(67 + 2.3)}

      {powerPole(13.4 * -3)}
      {powerPole(13.4 * -2)}
      {powerPole(-13.4)}
      {powerPole()}
      {powerPole(13.4)}
      {powerPole(13.4 * 2)}
      {powerPole(13.4 * 3)}
      {powerPole(13.4 * 4)}
      {powerPole(13.4 * 5)}
      
      {usps(6 - 33.5)} 
      {usps(6)} 
      {usps(6 + 33.5)} 
    </group>
  )
}
